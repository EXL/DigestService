/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015-2022 EXL <exlmotodev@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.6.7'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

group = 'ru.exlmoto'
version = '1.0.2'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

springBoot {
	buildInfo {
		properties {
			additional = [
				'revision': getShortGitRevision()
			]
		}
	}
}

dependencies {
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'

	runtimeOnly 'org.postgresql:postgresql'

	implementation 'com.github.pengrad:java-telegram-bot-api:5.7.0'

	implementation 'org.yaml:snakeyaml:1.29'
	implementation 'org.jsoup:jsoup:1.14.3'
	implementation 'org.nibor.autolink:autolink:0.10.0'
	implementation 'org.owasp.encoder:encoder:1.2.3'
	implementation 'org.apache.poi:poi:5.2.2'
	implementation 'org.apache.poi:poi-ooxml:5.2.2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

test {
	useJUnitPlatform()
}

def getShortGitRevision() {
	def commit = 'git rev-parse --short HEAD'
	def count = 'git rev-list --count HEAD'
	def branch = 'git rev-parse --abbrev-ref HEAD'
	try {
		return [branch.execute().text.trim(), commit.execute().text.trim(), count.execute().text.trim()].join('_')
	} catch (IOException ignored) {
		logger.warn('Cannot get information from Git commands. Is Git installed?')
		return 'unknown'
	}
}
